Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]
Constraints:
The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
Coding:
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:
        if not head or left == right:
            return head
        dummy = ListNode(0)
        dummy.next = head
        prev = dummy
        for _ in range(left - 1):
            prev = prev.next
        current = prev.next
        next_node = None
        
        for _ in range(right - left + 1):
            temp = current.next
            current.next = next_node
            next_node = current
            current = temp
        prev.next.next = current
        prev.next = next_node
        
        return dummy.next
def create_linked_list(values):
    dummy = ListNode()
    current = dummy
    for value in values:
        current.next = ListNode(value)
        current = current.next
    return dummy.next
def print_linked_list(head):
    values = []
    while head:
        values.append(head.val)
        head = head.next
    print(values)
head = create_linked_list([1, 2, 3, 4, 5])
solution = Solution()
reversed_head = solution.reverseBetween(head, 2, 4)
print_linked_list(reversed_head)
Output:
Input
head =
[1,2,3,4,5]
left =
2
right =
4
Stdout
[1, 4, 3, 2, 5]
Output
[1,4,3,2,5]
Expected
[1,4,3,2,5]
 
